


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             prelab2, CODE, READWRITE
    2 00000000         
    3 00000000         SysTick_Handler
                               PROC
    4 00000000                 EXPORT           SysTick_Handler
    5 00000000                 IMPORT           msTicks     ; import global var
                                                            iable
    6 00000000 4831            LDR              R0, =msTicks ; load global vari
                                                            able's address
    7 00000002 6801            LDR              R1, [R0]    ; load content in a
                                                            ddress onto R1
    8 00000004 F101 0101       ADD              R1, R1, #1  ; increase R1 by 1
    9 00000008 6001            STR              R1, [R0]    ; store R1 into the
                                                             address of the glo
                                                            bal var
   10 0000000A 4770            BX               LR
   11 0000000C                 ENDP
   12 0000000C         
   13 0000000C         
   14 0000000C         square_elements
                               PROC
   15 0000000C                 EXPORT           square_elements
   16 0000000C         ;R0 = pointer to beginning of array
   17 0000000C         ;R1 = size of array
   18 0000000C F04F 0200       MOV              R2, #0      ; initialize counte
                                                            r
   19 00000010         
   20 00000010         square_elem_loop
   21 00000010 428A            CMP              R2, R1      ; if counter == siz
                                                            e array, branch LR
   22 00000012 BF08 4770       BXEQ             LR
   23 00000016 FB02 F302       MUL              R3, R2, R2  ; calculate square 
                                                            and store in R3
   24 0000001A F840 3B04       STR              R3, [R0], #4 ; store value in R
                                                            3 into pointer and 
                                                            increase pointer ad
                                                            dress by one
   25 0000001E F102 0201       ADD              R2, R2, #1  ; increase counter
   26 00000022 E7F5            B                square_elem_loop ; branch to to
                                                            p of the loop
   27 00000024                 ENDP
   28 00000024         
   29 00000024         
   30 00000024         fibonacci
                               PROC
   31 00000024                 EXPORT           fibonacci
   32 00000024         ; R0 = pointer to beginning of array
   33 00000024         ; R1 = size of array
   34 00000024 B470            PUSH             {R4-R6}
   35 00000026 F04F 0200       MOV              R2, #0      ; initalize counter
                                                            
   36 0000002A         
   37 0000002A 428A            CMP              R2, R1      ; if the size of th
                                                            e array is 0, retur
                                                            n to caller
   38 0000002C BF08 4770       BXEQ             LR          ;
   39 00000030 F04F 0401       MOV              R4, #1      ; load first value 
                                                            into R4
   40 00000034 F840 4B04       STR              R4, [R0], #4 ; store first valu



ARM Macro Assembler    Page 2 


                                                            e into first place 
                                                            in array and increa
                                                            se pointer by 4
   41 00000038 F102 0201       ADD              R2, R2, #1  ;; R2=1
   42 0000003C 428A            CMP              R2, R1      ; if size of array 
                                                            is 1 jump to the lo
                                                            op in which the pro
                                                            gram will exit
   43 0000003E D005            BEQ              one_item
   44 00000040         
   45 00000040 F04F 0501       MOV              R5, #1      ; load second value
                                                             into R5
   46 00000044 F840 5B04       STR              R5, [R0], #4 ; store second val
                                                            ue into second plac
                                                            e in array and incr
                                                            ease pointer by 4
   47 00000048 F102 0201       ADD              R2, R2, #1  ;; R2=2
   48 0000004C         
   49 0000004C         one_item
   50 0000004C         
   51 0000004C         fibonacci_loop                       ; start of the loop
                                                            
   52 0000004C 428A            CMP              R2, R1      ; compare if counte
                                                            r == size of array
   53 0000004E D00A            BEQ              exitloop    ; if so, return to 
                                                            caller
   54 00000050 EB05 0604       ADD              R6, R5, R4  ; calculate newest 
                                                            number and store in
                                                             R6
   55 00000054 F105 0400       ADD              R4, R5, #0  ; move content in R
                                                            5 to R4
   56 00000058 F106 0500       ADD              R5, R6, #0  ; move content in R
                                                            6 to R5
   57 0000005C F840 5B04       STR              R5, [R0], #4 ; Store value in R
                                                            5 (new value) into 
                                                            current empty place
                                                             in array
   58 00000060 F102 0201       ADD              R2, R2, #1  ; increase counter
   59 00000064 E7F2            B                fibonacci_loop ; go back to top
                                                             of loop
   60 00000066                 ENDP
   61 00000066         
   62 00000066         exitloop
   63 00000066 BC70            POP              {R4-R6}
   64 00000068 4770            BX               LR
   65 0000006A         
   66 0000006A         dot_product
                               PROC
   67 0000006A                 EXPORT           dot_product
   68 0000006A         ;R0 points to array a
   69 0000006A         ;R1 points to array b
   70 0000006A         ;R2 has size of arrays
   71 0000006A B470            PUSH             {R4-R6}
   72 0000006C F04F 0300       MOV              R3, #0      ; initialize counte
                                                            r
   73 00000070 F04F 0600       MOV              R6, #0      ; initialize result
                                                            
   74 00000074         
   75 00000074         dot_loop



ARM Macro Assembler    Page 3 


   76 00000074 4293            CMP              R3, R2
   77 00000076 D008            BEQ              exit_dot
   78 00000078 F850 4B04       LDR              R4, [R0], #4
   79 0000007C F851 5B04       LDR              R5, [R1], #4
   80 00000080 FB04 6605       MLA              R6, R4, R5, R6 ; Multiply R4 by
                                                             R5 and add it to t
                                                            he current value of
                                                             R6 and store it in
                                                             R6
   81 00000084 F103 0301       ADD              R3, R3, #1
   82 00000088 E7F4            B                dot_loop
   83 0000008A                 ENDP
   84 0000008A         exit_dot
   85 0000008A 4630            MOV              R0, R6
   86 0000008C BC70            POP              {R4-R6}
   87 0000008E 4770            BX               LR
   88 00000090         
   89 00000090         
   90 00000090         blink   PROC
   91 00000090                 EXPORT           blink
   92 00000090                 IMPORT           msTicks
   93 00000090                 IMPORT           LED_Out
   94 00000090 E92D 07F0       PUSH             {R4-R10}
   95 00000094 F8DF 9034       LDR              R9, =LED_Out
   96 00000098 490B            LDR              R1, =msTicks
   97 0000009A 680D            LDR              R5, [R1]
   98 0000009C F04F 0600       MOV              R6, #0      ; current time
   99 000000A0 F04F 0A05       MOV              R10, #0x5   ; LED initial value
                                                            :0101
  100 000000A4         
  101 000000A4         blink_loop
  102 000000A4         ;;;;;;;;;;;;;;;;;;;;;;;;;;
  103 000000A4         ;;calculate time elapsed;;
  104 000000A4         ;;;;;;;;;;;;;;;;;;;;;;;;;;
  105 000000A4 680F            LDR              R7, [R1]
  106 000000A6 EBA7 0505       SUB              R5, R7, R5  ; msTick difference
                                                             since last check
  107 000000AA 442E            ADD              R6, R6, R5  ; add to current ti
                                                            me
  108 000000AC 463D            MOV              R5, R7      ;
  109 000000AE 4286            CMP              R6, R0      ; check if current 
                                                            time equals period
  110 000000B0 DA00            BGE              time_to_toggle
  111 000000B2         ; else loop
  112 000000B2 E7F7            B                blink_loop
  113 000000B4         
  114 000000B4         time_to_toggle
  115 000000B4 F04F 0600       MOV              R6, #0      ; reset current tim
                                                            e
  116 000000B8 F08A 0A0F       EOR              R10, R10, #0xF ; calculate new 
                                                            value
  117 000000BC B50F            PUSH             {LR, R0-R3}
  118 000000BE 4650            MOV              R0, R10     ; new led Value
  119 000000C0 47C8            BLX              R9
  120 000000C2 E8BD 400F       POP              {LR, R0-R3}
  121 000000C6 E7ED            B                blink_loop
  122 000000C8                 ENDP
  123 000000C8         
  124 000000C8         



ARM Macro Assembler    Page 4 


  125 000000C8         
  126 000000C8         ;blink PROC
  127 000000C8         ;EXPORT blink
  128 000000C8         ;IMPORT msTicks
  129 000000C8         ;IMPORT LED_Out
  130 000000C8         
  131 000000C8         ;PUSH {R4-R11}
  132 000000C8         
  133 000000C8         ;LDR R9, =LED_Out
  134 000000C8         ;LDR R1, =msTicks
  135 000000C8         ;LDR R5, [R1]
  136 000000C8         
  137 000000C8         ;MOV R6, #0  ; current time
  138 000000C8         ;MOV R10, #0x5  ; LED initial value:0101
  139 000000C8         
  140 000000C8         ;; Turn on LED
  141 000000C8         ;PUSH {R0}
  142 000000C8         ;MOV R0, R10
  143 000000C8         ;BLX R9
  144 000000C8         ;POP {R0}
  145 000000C8         
  146 000000C8         ;blink_loop
  147 000000C8         ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  148 000000C8         ;;;calculate time elapsed;;
  149 000000C8         ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  150 000000C8         
  151 000000C8         ;; Reload msTicks
  152 000000C8         ;LDR R1, =msTicks
  153 000000C8         ;LDR R7, [R1]
  154 000000C8         
  155 000000C8         ;SUB R5, R7, R5  ; msTick difference since last check
  156 000000C8         ;ADD R6, R6, R5  ; add to current time
  157 000000C8         ;MOV R5, R7  ;
  158 000000C8         
  159 000000C8         ;CMP R6, R0  ; check if current time equals period
  160 000000C8         ;BGE time_to_toggle
  161 000000C8         ;; else loop
  162 000000C8         ;B blink_loop
  163 000000C8         
  164 000000C8         ;time_to_toggle
  165 000000C8         ;MOV R6, #0  ; reset current time
  166 000000C8         ;EOR R10, R10, #0xF ; calculate new value
  167 000000C8         
  168 000000C8         ;PUSH {LR, R0, R1, R2, R3}
  169 000000C8         ;MOV R0, R10 ; new led Value
  170 000000C8         ;BLX R9
  171 000000C8         ;POP {LR, R0, R1, R2, R3}
  172 000000C8         ;B blink_loop
  173 000000C8         ;ENDP
  174 000000C8         
  175 000000C8         
  176 000000C8                 END
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\fla
sh\lab_methods.d -o.\flash\lab_methods.o -IC:\Users\pabloalonso\Documents\EE414
4\Tuner\RTE -IC:\Users\pabloalonso\Documents\EE4144\Tuner\RTE\Device\STM32F407V
G -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Kei
l\STM32F4xx_DFP\1.0.8\Boards\ST\STM32F4-Discovery\Common -IC:\Keil_v5\ARM\PACK\



ARM Macro Assembler    Page 5 


Keil\STM32F4xx_DFP\1.0.8\Device\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DF
P\1.0.8\RTE_Driver --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" 
--predefine="_RTE_ SETA 1" --predefine="STM32F40_41xxx SETA 1" --list=.\flash\l
ab_methods.lst lab_methods.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SysTick_Handler 00000000

Symbol: SysTick_Handler
   Definitions
      At line 3 in file lab_methods.s
   Uses
      At line 4 in file lab_methods.s
Comment: SysTick_Handler used once
blink 00000090

Symbol: blink
   Definitions
      At line 90 in file lab_methods.s
   Uses
      At line 91 in file lab_methods.s
Comment: blink used once
blink_loop 000000A4

Symbol: blink_loop
   Definitions
      At line 101 in file lab_methods.s
   Uses
      At line 112 in file lab_methods.s
      At line 121 in file lab_methods.s

dot_loop 00000074

Symbol: dot_loop
   Definitions
      At line 75 in file lab_methods.s
   Uses
      At line 82 in file lab_methods.s
Comment: dot_loop used once
dot_product 0000006A

Symbol: dot_product
   Definitions
      At line 66 in file lab_methods.s
   Uses
      At line 67 in file lab_methods.s
Comment: dot_product used once
exit_dot 0000008A

Symbol: exit_dot
   Definitions
      At line 84 in file lab_methods.s
   Uses
      At line 77 in file lab_methods.s
Comment: exit_dot used once
exitloop 00000066

Symbol: exitloop
   Definitions
      At line 62 in file lab_methods.s
   Uses
      At line 53 in file lab_methods.s
Comment: exitloop used once
fibonacci 00000024




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: fibonacci
   Definitions
      At line 30 in file lab_methods.s
   Uses
      At line 31 in file lab_methods.s
Comment: fibonacci used once
fibonacci_loop 0000004C

Symbol: fibonacci_loop
   Definitions
      At line 51 in file lab_methods.s
   Uses
      At line 59 in file lab_methods.s
Comment: fibonacci_loop used once
one_item 0000004C

Symbol: one_item
   Definitions
      At line 49 in file lab_methods.s
   Uses
      At line 43 in file lab_methods.s
Comment: one_item used once
prelab2 00000000

Symbol: prelab2
   Definitions
      At line 1 in file lab_methods.s
   Uses
      None
Comment: prelab2 unused
square_elem_loop 00000010

Symbol: square_elem_loop
   Definitions
      At line 20 in file lab_methods.s
   Uses
      At line 26 in file lab_methods.s
Comment: square_elem_loop used once
square_elements 0000000C

Symbol: square_elements
   Definitions
      At line 14 in file lab_methods.s
   Uses
      At line 15 in file lab_methods.s
Comment: square_elements used once
time_to_toggle 000000B4

Symbol: time_to_toggle
   Definitions
      At line 114 in file lab_methods.s
   Uses
      At line 110 in file lab_methods.s
Comment: time_to_toggle used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

LED_Out 00000000

Symbol: LED_Out
   Definitions
      At line 93 in file lab_methods.s
   Uses
      At line 95 in file lab_methods.s
Comment: LED_Out used once
msTicks 00000000

Symbol: msTicks
   Definitions
      At line 5 in file lab_methods.s
      At line 92 in file lab_methods.s
   Uses
      At line 6 in file lab_methods.s
      At line 96 in file lab_methods.s
Warning: msTicks multiply defined
2 symbols
353 symbols in table
